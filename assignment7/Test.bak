import java.awt.*;

public class Test extends BufferedApplet
{
	int width = 0;
	int height = 0;
	double f = 10;
	double scale = 10;
	double norm;
	double sqrt;
	double temp;
	double tempArray[] = new double[3];
	Color background = Color.blue;

	Sphere sphere1;
	Material material1;
	Light light1;

	Color drawRGB;

	double v[] = new double[3];	// original of the ray
	double w[] = new double[3];	// direction of the ray
	double S[] = new double[3];	// surface of the sphere
	double c[] = new double[3];	// center of each sphere
	double r;			// radius of each sphere
	double t;			// temp value of the ray
	double N[] = new double[3];	// surface normal for a sphere
	double R[] = new double[3];	// reflection vector
	double phong[] = new double[3];
	double reflection[] = new double[3];
	double mc[] = new double[3];
	

	public Test() {
		initialize();
	}

	public void render(Graphics g) {
		width = getWidth();
		height = getHeight();
//		g.setColor(background);
//		g.fillRect(0,0,width,height);

		rayTracingAndDraw(g);

//		System.out.println(sphere1.c[0]);
//		System.out.println(sphere1.c[1]);
//		System.out.println(sphere1.c[2]);
//		System.out.println(sphere1.r);
	}

	public void initialize() {
		sphere1 = new Sphere();
		sphere1.c[0] = 0;
		sphere1.c[1] = 0;
		sphere1.c[2] = -f;
		material1 = new Material();
		material1.Argb[0] = background.getRed();
		material1.Argb[1] = background.getGreen();
		material1.Argb[2] = background.getBlue();
		material1.Drgb[0] = 255;
		material1.Drgb[1] = 0;
		material1.Drgb[2] = 0;
		material1.Srgb[0] = 0;
		material1.Srgb[1] = 255;
		material1.Srgb[2] = 0;
		light1 = new Light();
	}

	public void rayTracingAndDraw(Graphics g) {
		for (int row=0; row<height; row++) {
			for (int col=0; col<width; col++) {
				v[0] = 0;
				v[1] = 0;
				v[2] = f;
				w[0] = (col-0.5*width*scale)/width;
				w[1] = (0.5*height*scale-row)/width;
				w[2] = 0;
				System.out.println("wX: "+w[0]+";\twY: "+w[1]+";\twZ: "+w[2]);
				normalize(w);
				c[0] = sphere1.c[0];
				c[1] = sphere1.c[1];
				c[2] = sphere1.c[2];
				r = sphere1.r;
				mc = material1.mCrgb;
				sqrt = Math.pow(multiply(w,minus(v,c)),2) - multiply(minus(v,c),minus(v,c)) + Math.pow(r,2);
		//		sqrt = Math.pow(w[0]*(v[0]-c[0])+w[1]*(v[1]-c[1])+w[2]*(v[2]-c[2]),2)		// w.(v-c)^2
		//			-Math.pow(v[0]-c[0],2)-Math.pow(v[1]-c[1],2)-Math.pow(v[2]-c[2],2)	// -(v-c)^2
		//			+Math.pow(r,2);								// + r^2
		//		if (sqrt >= 0) {
				if (false) {
					System.out.println("here! ");
					t = -multiply(w,minus(v,c))-Math.sqrt(sqrt);
					System.out.println("t: "+t);
		//			t = -(w[0]*(v[0]-c[0])+w[1]*(v[1]-c[1])+w[2]*(v[2]-c[2]))-Math.sqrt(sqrt);
					S = plus(multiply(w,t),v);
					System.out.println("SX: "+S[0]+";\tSY: "+S[1]+";\tSZ: "+S[2]);
					N = divide(minus(S,c),r);
		//			N[0] = (S[0]-c[0]) / r;
		//			N[1] = (S[1]-c[1]) / r;
		//			N[2] = (S[2]-c[2]) / r;
					R = minus(w, multiply(N,2*multiply(N,w)));
					phong = plus(material1.Argb, multiply(light1.Irgb, plus(multiply(material1.Drgb,multiply(light1.Lxyz,N)), multiply(material1.Srgb, Math.pow(multiply(light1.Lxyz,R),material1.p)))));
					double color[] = {phong[0]*(1.0-mc[0])+material1.Argb[0]*mc[0], phong[1]*(1.0-mc[1])+material1.Argb[1]*mc[1], phong[2]*(1.0-mc[2])+material1.Argb[2]*mc[2]};
					drawRGB = new Color((int)color[0], (int)color[1], (int)color[2]);
					System.out.println(color[0]+": "+color[1]+": "+color[2]);
					g.setColor(drawRGB);
					g.drawRect(col,row,1,1);
				} else {
					g.setColor(background);
					System.out.println("draw! ");
					g.drawRect(col,row,1,1);
				}
				System.out.println("row: "+ row);
				System.out.println("col: "+ col);
			}
		}
	}

	public double[] plus(int src[], double d) {
		for (int i=0; i<src.length; i++) {
			tempArray[i] = (double)src[i]+d;
		}
		return tempArray;
	}

	public double[] plus(double src[], double srr[]) {
		for (int i=0; i<src.length; i++) {
			tempArray[i] = src[i]+srr[i];
		}
		return tempArray;
	}

	public double[] minus(double d, double src[]) {
		for (int i=0; i<src.length; i++) {
			tempArray[i] = d-src[i];
		}
		return tempArray;
	}

	public double[] minus(int src[], double srr[]) {
		for (int i=0; i<src.length; i++) {
			tempArray[i] = (double)src[i]-srr[i];
		}
		return tempArray;
	}

	public double[] minus(double src[], double srr[]) {
		for (int i=0; i<src.length; i++) {
			tempArray[i] = src[i]-srr[i];
		}
		return tempArray;
	}

	public double[] divide(double src[], double d) {
		for (int i=0; i<src.length; i++) {
			tempArray[i] = src[i]/d;
		}
		return tempArray;
	}

	public double[] multiply(int src[], double d) {
		for (int i=0; i<src.length; i++) {
			tempArray[i] = (double)src[i]*d;
		}
		return tempArray;
	}

	public double[] multiply(double src[], double d) {
		for (int i=0; i<src.length; i++) {
			tempArray[i] = src[i]*d;
		}
		return tempArray;
	}

	public double multiply(int src[], double srr[]) {
		temp = 0;
		for (int i=0; i<src.length; i++) {
			temp += (double)src[i]*srr[i];
		}
		return temp;
	}

	public double multiply(double src[], double srr[]) {
		temp = 0;
		for (int i=0; i<src.length; i++) {
			temp += src[i]*srr[i];
		}
		return temp;
	}
	
	public void normalize(double src[]) {
		norm = Math.sqrt(multiply(src,src));
		for (int i=0; i<src.length; i++) {
			src[i] /= norm;
		}
	}
	public void viewport(double src[], int dst[]) {
		dst[0] = (int) ( 0.5 * width  + src[0] * scale );
		dst[1] = (int) ( 0.5 * height - src[1] * scale );
	}
}
